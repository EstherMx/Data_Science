ProbExercises


Probability in Python for P(A or B):

def prob_a_or_b(a, b, all_possible_outcomes):
   	# probability of event a
  prob_a = len(a)/len(all_possible_outcomes)
	
	# probability of event b
  prob_b = len(b)/len(all_possible_outcomes)
	
	# intersection of events a and b
  inter = a.intersection(b)
	
	# probability of intersection of events a and b
  prob_inter = len(inter)/len(all_possible_outcomes)

  	# write a return statement that returns the probability of events a or b occuring
 	# P(A or B) with intersection = P(A) + P(B) - P(A and B) //P(A and B): is the intersection, events are both in A and B
  return prob_a + prob_b - prob_inter

	# call function prob_a_or_b()
  print(prob_a_or_b(evens, odds, all_possible_rolls))



ie 2:
	# rolling a die once and getting an even number or an odd number
evens = {2, 4, 6}
odds = {1, 3, 5}
all_possible_rolls = {1, 2, 3, 4, 5, 6}

	# call function prob_a_or_b()
print(prob_a_or_b(evens, odds, all_possible_rolls))
 
 How I would solve it: 
  rolling a die once and getting an even or odd number. P(A or B) = P(A) + P(B), no intersection

  prob_a = len(evens)/ len(all_possible_rolls) = 3/6 = 1/2
  prob_b = len(odds)/ len(all_possible_rolls) = 3/6 = 1/2

  prob_a_or_b = prob_a + prob_b = 1/2 + 1/2 = 1

ie 3:
  # rolling a die once and getting an odd number or a number greater than 2
Call prob_a_or_b() using the following variables:

odds = {1, 3, 5}
greater_than_two = {3, 4, 5, 6}
all_possible_rolls = {1, 2, 3, 4, 5, 6}

How I would solve it: 
 prob_odds = len(odds)/ len(all_possible_rolls) = 3/6 
 prob_greater_than_two = len(greater_than_two)/ len(all_possible_rolls) = 4/6
 prob_intersection = (odds.intersection(greater_than_two)/ all_possible_rolls) = ({3, 5}/ {1, 2, 3, 4, 5, 6}) = 2/ 6
 probability of getting both true:

P(A or B) = P(A) + P(B) - P(A and B) = prob_odds + prob_greater_than_two - prob_intersection = 3/6 + 4/6 - 2/6 = 5/6




